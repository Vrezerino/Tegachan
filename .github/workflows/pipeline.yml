name: Build, test, deploy

on: push

env:
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME}}
  AWS_BUCKET_URL: ${{ secrets.AWS_BUCKET_URL }}
  AWS_BUCKET_NAME_DEV: ${{ secrets.AWS_BUCKET_NAME_DEV }}
  AWS_BUCKET_URL_DEV: ${{ secrets.AWS_BUCKET_URL_DEV }}
  AWS_BUCKET_NAME_TEST: ${{ secrets.AWS_BUCKET_NAME_TEST }}
  AWS_BUCKET_URL_TEST: ${{ secrets.AWS_BUCKET_URL_TEST }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

  AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
  AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}
  AZURE_SSH_PRIVATE_KEY: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}

  PGDB_URL: ${{ secrets.PGDB_URL }}
  PGDB_URL_DEV: ${{ secrets.PGDB_URL_DEV }}

  UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
  UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}

  BANLIST: ${{ secrets.BANLIST }}
  PROXYLIST: ${{ secrets.PROXYLIST }}
  BWL: ${{ secrets.BWL }}
  CI: true

permissions:
  contents: write
  deployments: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run unit tests
        run: npx vitest run

      - name: Build standalone app
        run: npm run build --if-present

      - name: Debug test image presence
        run: ls -l __tests__/assets/

      # Copy files and folders into right places. Has to be done manually
      # after build. This is because Vercel thinks surely you're using a
      # CDN to serve static files if you build in standalone mode, and so
      # this step isn't baked in the build process
      - name: Prepare standalone output
        run: |
          cd ${{ github.workspace }}
          cp -r public .next/standalone/
          cp -r .next/static .next/standalone/.next/
          cp -r .next/BUILD_ID .next/standalone/
          cp -r .next/BUILD_ID .next/standalone/.next/

          echo "In .next/standalone/:"
          ls -la .next/standalone

          echo "In .next/standalone/.next:"
          ls -la .next/standalone/.next

      - name: Run e2e tests
        run: npx playwright install --with-deps && npx playwright test

      - name: Upload Playwright traces on e2e failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: |
            test-results/**/*.zip

      - name: Remove Next cache
        run: |
          cd ${{ github.workspace }}
          rm -rf .next/cache

      - name: Upload standalone build
        uses: actions/upload-artifact@v4
        with:
          name: tegachanArtifact
          path: |
            .next/standalone/

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: tegachanArtifact
          path: tegachanArtifact

      - name: Set up SSH key
        run: |
          set -ex
          mkdir -p ~/.ssh

          echo "$AZURE_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # echo "AZURE_VM_IP: $AZURE_VM_IP"
          ssh-keyscan -H $AZURE_VM_IP >> ~/.ssh/known_hosts

      - name: List files in standalone dir
        run: |
          echo "Listing files in standalone dir..."
          ls -al tegachanArtifact/

      #- name: Deploy to server
      #  shell: bash
      #  run: |
      #    chmod -R 755 tegachanArtifact/
      #
      #    # Confirm presence of target folder
      #    # ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }} "ls -la ~/tegachan/.next/standalone"
      #
      #    echo "Stopping pm2 and clearing target folder..."
      #    # Supress pm2 table output upon stopping already running site
      #    # Tilde might not expand properly, use full path to home
      #    ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }} "pm2 stop tegachan > /dev/null 2>&1 && rm -rf /home/${{ secrets.AZURE_USERNAME }}/tegachan/.next/standalone/{*,.*}"
      #
      #    echo "Copying files..."
      #    # shopt modifies glob behavior to include hidden stuff
      #    shopt -s dotglob
      #    scp -r tegachanArtifact/* ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }}:~/tegachan/.next/standalone
      #
      #    echo "Starting pm2..."
      #    ssh ${{ secrets.AZURE_USERNAME }}@${{ secrets.AZURE_VM_IP }} "cd ~/tegachan/.next/standalone && pm2 start server.js --name tegachan"

      - name: Mark deployment as successful
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          DEPLOYMENT_ID=$(  {
            gh api repos/${{ github.repository }}/deployments \
              --field ref=${{ github.sha }} \
              --field environment=production \
              --field auto_merge=false \
              --field required_contexts[]= \
              --field description="Deployed via GitHub Actions" \
              -q '.id'
          })

          gh api repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
          -f state=success
